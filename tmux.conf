# prefixを<C-t>へ変更
set -g prefix C-w
# prefixを<C-b>から解除
unbind C-b

# 色がまともになるように設定
set-option -g default-terminal screen-256color
set-option -g terminal-overrides 'xterm:colors=256'

# Esc有効までの遅延時間を0に設定
set -g escape-time 0

# prefix r で設定ファイルをリロード
bind-key r source-file ~/.tmux.conf \; display "Reloaded!"

# prefix | でペインを横分割
bind-key | split-window -h -c "#{pane_current_path}"
# prefix - でペインを縦分割
bind-key - split-window -v -c "#{pane_current_path}"

# ペインの移動をhjklに設定
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
#bind-key -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
#bind-key -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
#bind-key -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
#bind-key -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind-key h run "tmux select-pane -L"
bind-key j run "tmux select-pane -D"
bind-key k run "tmux select-pane -U"
bind-key l run "tmux select-pane -R"
# ウィンドウを１番から開始
set-option -g base-index 1
# ペインを１番から開始
set-window-option -g pane-base-index 1
# ステータスバーの色を変更
set-option -g status-bg "colour238"
# ステータスバーを30秒毎に再描画
set-option -g status-interval 1
# ステータスバーを画面上部に表示
set-option -g status-position top
# ステータスバー右側の最大長さを設定
set-option -g status-right-length 90
# ステータスバー右側表示内容
set-option -g status-right "#[fg=cyan][%Y-%m-%d(%a) %H:%M:%S]"
# ステータスバー左側の最大長さを設定
set-option -g status-left-length 90
# ステータスバー左側表示内容
set-option -g status-left "#[fg=colour9]#H #[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
# ステータスバーをセンタリング
set-option -g status-justify centre
# カレントウィンドウ以外のウィンドウでの変化を通知
set-window-option -g monitor-activity on
# ヴィジュアルノーティフィケーション
set-window -g visual-activity on
# アクティブなウィンドウを強調
set-window-option -g window-status-current-style bg=default,fg=white,bright
# ペインボーダの色を設定
set-option -g pane-border-style fg=white,bg=default
# アクティブなペインの強調
set-option -g pane-active-border-style fg=green,bg=default

# キーバインドをViに設定
set-window-option -g mode-keys vi
# prefix v でコピーモード
bind-key v copy-mode \; display "Copy mode!"
# 選択開始
bind-key -T copy-mode-vi v send-keys -X begin-selection
# 短形選択
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggl
# １行選択
bind-key -T copy-mode-vi V send-keys -X select-line
# y でヤンク
bind-key -T copy-mode-vi y send-keys -X copy-selection
# Y で１行ヤンク
bind-key -T copy-mode-vi Y send-keys -X copy-line
# prefix p でペースト
bind-key p paste-buffer
# バッファから選択してペースト
bind-key P choose-buffer
# コピーモードの選択を解除
bind-key -T copy-mode-vi Escape send-keys -X clear-selection
# コピーモードでの前方検索
bind-key -T copy-mode-vi / send-keys -X search-forward
# コピーモードでの後方検索
bind-key -T copy-mode-vi ? send-keys -X search-backward
# コピーモードでのページスクロール
bind-key -T copy-mode-vi C-b send-keys -X page-up
bind-key -T copy-mode-vi C-f send-keys -X page-down
# コピーモードでのページ送り
bind-key -T copy-mode-vi C-u send-keys -X scroll-up
bind-key -T copy-mode-vi C-d send-keys -X scroll-down

# OSX固有の処理
if-shell 'test "$(uname -s)" = Darwin' "source-file ~/.tmux/tmux.osx/tmux.conf.osx"
